#.codiumai.toml
[tests]
framework = "Spock"

## A hint to the test generator about whether to use mocks or not. Possible values are true or false.
use_mocks = true

## How many tests should be generated by default. Fewer tests is faster.
## Does not apply at the moment to extend-suite tests.
num_desired_tests = 10

## A multiline string, delimited with triple-quotes (""") serving as an extra instruction
## that the AI model will take into consideration.
## This will appear as "General instructions" in the
## configuration section in the tests panel.
 plan_instructions = """
    1. You must provide a where: block that is the data table for the Test.
    2. Follow this flow for creating Spock tests: Blocks setup -> stimulus -> response -> cleanup➰where
    3. When possible use a Subscriber subscriber = Stub() to validate calls.
 """

## A multiline string, delimited with triple-quotes (""") serving as an example test that represents
## what you would like the generated tests to look like in terms of style, setup, etc.
example_test = """
import spock.lang.*

class PublisherSpec extends Specification {

    Publisher publisher = new Publisher()
    @Unroll
    def "should correctly handle various responses from subscribers"() {
        given: "a publisher with one subscriber"
        def subscriber = Stub(Subscriber)
        publisher.addSubscriber(subscriber)

        when: "the publisher sends a message"
        def result = publisher.send(message)

        then: "the subscriber should receive the message"
        1 * subscriber.receive(message) >> received

        where:
        message                  | received
        "Important message"      | true
        "Another message"        | false
    }

    @Unroll
    def "should send different messages to different subscribers"() {
        given: "a set of subscribers"
        def subscriber1 = Mock(Subscriber)
        def subscriber2 = Mock(Subscriber)

        and: "a publisher with subscribers"
        publisher.addSubscriber(subscriber1)
        publisher.addSubscriber(subscriber2)

        when: "the publisher sends messages"
        publisher.send(message1)
        publisher.send(message2)

        then: "subscribers should receive the correct messages"
        1 * subscriber1.receive(message1)
        1 * subscriber2.receive(message2)

        where:
        message1              | message2
        "Message 1 for sub1"  | "Message 2 for sub2"
        "Hello sub1"          | "Hi sub2"
    }
}
 """

