#.codiumai.toml
[tests]

framework = "Spock"
use_mocks = true

## How many tests should be generated by default. Fewer tests is faster.
## Does not apply at the moment to extend-suite tests.
num_desired_tests = 10

 plan_instructions = """
1. Every test will have a where block with a data table to feed the tests
2. Where block is formatted like the following: where: "data table description" \n  a  | b  | operation  | expectedResult \n 10 | 5  | "add"      | 15

"""

example_test = """
package ai.qodo.chuck

import spock.lang.Specification
import spock.lang.Unroll

class CalculatorServiceTest extends Specification {

    def mathService = Mock(MathService) // Mocking MathService
    def calculatorService = Spy(CalculatorService, constructorArgs: [mathService]) // Spying CalculatorService

    @Unroll
    def "should perform #operation on #a and #b and return #expectedResult"() {
        given: "A CalculatorService with a MathService"

        when: "Performing the operation"
        def result = calculatorService.performOperation(a, b, operation)

        then: "The MathService is called correctly and returns the expected result"
        1 * mathService.performOperation(a, b, operation) >> expectedResult // Verifying interaction with Mock
        result == expectedResult

        where: "Different operation scenarios"
        a  | b  | operation  | expectedResult
        10 | 5  | "add"      | 15
        10 | 5  | "subtract" | 5
    }

    def "should handle unsupported operation"() {
        given: "A CalculatorService"
        String unsupportedOperation = "multiply"

        when: "Performing an unsupported operation"
        def result = calculatorService.performOperation(10, 5, unsupportedOperation)

        then: "An exception is thrown"
        thrown(UnsupportedOperationException)
    }
}
 """
